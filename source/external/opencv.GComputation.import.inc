{
  ??0GComputation@cv@@QEAA@$$QEAU?$GIOProtoArgs@UIn_Tag@cv@@@1@$$QEAU?$GIOProtoArgs@UOut_Tag@cv@@@1@@Z
  ??0GComputation@cv@@QEAA@$$QEAU?$GIOProtoArgs@UIn_Tag@cv@@@1@$$QEAU?$GIOProtoArgs@UOut_Tag@cv@@@1@@Z
  cv::GComputation::GComputation(struct cv::GIOProtoArgs<struct cv::In_Tag> &&,struct cv::GIOProtoArgs<struct cv::Out_Tag> &&)
}
// ??0GComputation@cv@@QEAA@$$QEAV01@@Z	??0GComputation@cv@@QEAA@$$QEAV01@@Z	cv::GComputation::GComputation(class cv::GComputation &&)
// ??0GComputation@cv@@QEAA@AEAUIIStream@s11n@gapi@1@@Z	??0GComputation@cv@@QEAA@AEAUIIStream@s11n@gapi@1@@Z	cv::GComputation::GComputation(struct cv::gapi::s11n::IIStream &)
// ??0GComputation@cv@@QEAA@AEBV01@@Z	??0GComputation@cv@@QEAA@AEBV01@@Z	cv::GComputation::GComputation(class cv::GComputation const &)
// ??0GComputation@cv@@QEAA@AEBV?$function@$$A6A?AVGComputation@cv@@XZ@std@@@Z	??0GComputation@cv@@QEAA@AEBV?$function@$$A6A?AVGComputation@cv@@XZ@std@@@Z	cv::GComputation::GComputation(class std::function<class cv::GComputation > const &)
{
  ??0GComputation@cv@@QEAA@AEBV?$vector@VGMat@cv@@V?$allocator@VGMat@cv@@@std@@@std@@0@Z
  ??0GComputation@cv@@QEAA@AEBV?$vector@VGMat@cv@@V?$allocator@VGMat@cv@@@std@@@std@@0@Z
  cv::GComputation::GComputation(
  class std::vector<class cv::GMat,class std::allocator<class cv::GMat> > const &,
  class std::vector<class cv::GMat,class std::allocator<class cv::GMat> > const &)
}
procedure constructor_GComputation(Obj: pGComputation; const ins, outs: Vector<TGMat>); overload;
  external opencv_world_dll name '??0GComputation@cv@@QEAA@AEBV?$vector@VGMat@cv@@V?$allocator@VGMat@cv@@@std@@@std@@0@Z'{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
{
  ??0GComputation@cv@@QEAA@VGMat@1@00@Z
  ??0GComputation@cv@@QEAA@VGMat@1@00@Z
  cv::GComputation::GComputation(class cv::GMat,class cv::GMat,class cv::GMat)
}
{
  ??0GComputation@cv@@QEAA@VGMat@1@0@Z
  ??0GComputation@cv@@QEAA@VGMat@1@0@Z
  cv::GComputation::GComputation(class cv::GMat,class cv::GMat)
}
procedure constructor_GComputation(Obj: pGComputation; const &in: TGMat; const &out: TGMat); overload;
  external opencv_world_dll name '??0GComputation@cv@@QEAA@VGMat@1@0@Z'{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
// ??0GComputation@cv@@QEAA@VGMat@1@0VGScalar@1@@Z	??0GComputation@cv@@QEAA@VGMat@1@0VGScalar@1@@Z	cv::GComputation::GComputation(class cv::GMat,class cv::GMat,class cv::GScalar)
// ??0GComputation@cv@@QEAA@VGMat@1@VGScalar@1@@Z	??0GComputation@cv@@QEAA@VGMat@1@VGScalar@1@@Z	cv::GComputation::GComputation(class cv::GMat,class cv::GScalar)
{
  ??1GComputation@cv@@QEAA@XZ
  ??1GComputation@cv@@QEAA@XZ
  cv::GComputation::~GComputation(void)
}
procedure destructor_GComputation(Obj: pGComputation); external opencv_world_dll name '??1GComputation@cv@@QEAA@XZ'{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};

{
  ??4GComputation@cv@@QEAAAEAV01@$$QEAV01@@Z
  ??4GComputation@cv@@QEAAAEAV01@$$QEAV01@@Z
  class cv::GComputation & cv::GComputation::operator=(class cv::GComputation &&)
}
{
  ??4GComputation@cv@@QEAAAEAV01@AEBV01@@Z
  ??4GComputation@cv@@QEAAAEAV01@AEBV01@@Z
  class cv::GComputation & cv::GComputation::operator=(class cv::GComputation const &)
}
{
  ?apply@GComputation@cv@@QEAAX$$QEAV?$vector@UGRunArg@cv@@V?$allocator@UGRunArg@cv@@@std@@@std@@$$QEAV?$vector@V?$variant@PEAVUMat@cv@@PEAVMat@2@PEAVRMat@2@PEAV?$Scalar_@N@2@PEAVMediaFrame@2@VVectorRef@detail@2@VOpaqueRef@82@@util@cv@@V?$allocator@V?$variant@PEAVUMat@cv@@PEAVMat@2@PEAVRMat@2@PEAV?$Scalar_@N@2@PEAVMediaFrame@2@VVectorRef@detail@2@VOpaqueRef@82@@util@cv@@@std@@@4@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z
  ?apply@GComputation@cv@@QEAAX$$QEAV?$vector@UGRunArg@cv@@V?$allocator@UGRunArg@cv@@@std@@@std@@$$QEAV?$vector@V?$variant@PEAVUMat@cv@@PEAVMat@2@PEAVRMat@2@PEAV?$Scalar_@N@2@PEAVMediaFrame@2@VVectorRef@detail@2@VOpaqueRef@82@@util@cv@@V?$allocator@V?$variant@PEAVUMat@cv@@PEAVMat@2@PEAVRMat@2@PEAV?$Scalar_@N@2@PEAVMediaFrame@2@VVectorRef@detail@2@VOpaqueRef@82@@util@cv@@@std@@@4@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z
  void cv::GComputation::apply(class std::vector<struct cv::GRunArg,class std::allocator<struct cv::GRunArg> > &&,class std::vector<class cv::util::variant<class cv::UMat *,class cv::Mat *,class cv::RMat *,class cv::Scalar_<double> *,class cv::MediaFrame *,class cv::detail::VectorRef,class cv::detail::OpaqueRef>,class std::allocator<class cv::util::variant<class cv::UMat *,class cv::Mat *,class cv::RMat *,class cv::Scalar_<double> *,class cv::MediaFrame *,class cv::detail::VectorRef,class cv::detail::OpaqueRef> > > &&,class std::vector<struct cv::GCompileArg,class std::allocator<struct cv::GCompileArg> > &&)
}
{
  ?apply@GComputation@cv@@QEAAXAEBV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@0$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z
  ?apply@GComputation@cv@@QEAAXAEBV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@0$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z
  void cv::GComputation::apply(
  class std::vector<class cv::Mat,class std::allocator<class cv::Mat> > const &,
  class std::vector<class cv::Mat,class std::allocator<class cv::Mat> > const &,
  class std::vector<struct cv::GCompileArg,class std::allocator<struct cv::GCompileArg> > &&)
}
procedure apply_const_GComputation(Obj: pGComputation; const ins, outs: Vector<TMat>; const args: TGCompileArgs); overload;
  external opencv_world_dll name
  '?apply@GComputation@cv@@QEAAXAEBV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@0$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z'{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
{
  ?apply@GComputation@cv@@QEAAXAEBV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@AEAV34@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z
  ?apply@GComputation@cv@@QEAAXAEBV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@AEAV34@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z
  void cv::GComputation::apply(
  class std::vector<class cv::Mat,class std::allocator<class cv::Mat> > const &,
  class std::vector<class cv::Mat,class std::allocator<class cv::Mat> > &,
  class std::vector<struct cv::GCompileArg,class std::allocator<struct cv::GCompileArg> > &&)
}
procedure apply_GComputation(Obj: pGComputation; const ins: Vector<TMat>; outs: Vector<pMat>; const args: TGCompileArgs); overload;
  external opencv_world_dll name
  '?apply@GComputation@cv@@QEAAXAEBV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@AEAV34@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z'{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
// ?apply@GComputation@cv@@QEAAXVMat@2@0AEAV32@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@std@@@Z	?apply@GComputation@cv@@QEAAXVMat@2@0AEAV32@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@std@@@Z	void cv::GComputation::apply(class cv::Mat,class cv::Mat,class cv::Mat &,class std::vector<struct cv::GCompileArg,class std::allocator<struct cv::GCompileArg> > &&)
// ?apply@GComputation@cv@@QEAAXVMat@2@0AEAV?$Scalar_@N@2@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@std@@@Z	?apply@GComputation@cv@@QEAAXVMat@2@0AEAV?$Scalar_@N@2@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@std@@@Z	void cv::GComputation::apply(class cv::Mat,class cv::Mat,class cv::Scalar_<double> &,class std::vector<struct cv::GCompileArg,class std::allocator<struct cv::GCompileArg> > &&)
// ?apply@GComputation@cv@@QEAAXVMat@2@AEAV32@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@std@@@Z	?apply@GComputation@cv@@QEAAXVMat@2@AEAV32@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@std@@@Z	void cv::GComputation::apply(class cv::Mat,class cv::Mat &,class std::vector<struct cv::GCompileArg,class std::allocator<struct cv::GCompileArg> > &&)
// ?apply@GComputation@cv@@QEAAXVMat@2@AEAV?$Scalar_@N@2@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@std@@@Z	?apply@GComputation@cv@@QEAAXVMat@2@AEAV?$Scalar_@N@2@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@std@@@Z	void cv::GComputation::apply(class cv::Mat,class cv::Scalar_<double> &,class std::vector<struct cv::GCompileArg,class std::allocator<struct cv::GCompileArg> > &&)
// ?getGraph@detail@gapi@cv@@YA?AVGComputation@3@AEBV?$vector@DV?$allocator@D@std@@@std@@@Z	?getGraph@detail@gapi@cv@@YA?AVGComputation@3@AEBV?$vector@DV?$allocator@D@std@@@std@@@Z	class cv::GComputation cv::gapi::detail::getGraph(class std::vector<char,class std::allocator<char> > const &)
// ?priv@GComputation@cv@@QEAAAEAVPriv@12@XZ	?priv@GComputation@cv@@QEAAAEAVPriv@12@XZ	class cv::GComputation::Priv & cv::GComputation::priv(void)
{
  ?priv@GComputation@cv@@QEBAAEBVPriv@12@XZ
  ?priv@GComputation@cv@@QEBAAEBVPriv@12@XZ
  class cv::GComputation::Priv const & cv::GComputation::priv(void)
}
{
  ?recompile@GComputation@cv@@IEAAX$$QEAV?$vector@V?$variant@Umonostate@util@cv@@UGMatDesc@3@UGScalarDesc@3@UGArrayDesc@3@UGOpaqueDesc@3@UGFrameDesc@3@@util@cv@@V?$allocator@V?$variant@Umonostate@util@cv@@UGMatDesc@3@UGScalarDesc@3@UGArrayDesc@3@UGOpaqueDesc@3@UGFrameDesc@3@@util@cv@@@std@@@std@@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z	?recompile@GComputation@cv@@IEAAX$$QEAV?$vector@V?$variant@Umonostate@util@cv@@UGMatDesc@3@UGScalarDesc@3@UGArrayDesc@3@UGOpaqueDesc@3@UGFrameDesc@3@@util@cv@@V?$allocator@V?$variant@Umonostate@util@cv@@UGMatDesc@3@UGScalarDesc@3@UGArrayDesc@3@UGOpaqueDesc@3@UGFrameDesc@3@@util@cv@@@std@@@std@@$$QEAV?$vector@UGCompileArg@cv@@V?$allocator@UGCompileArg@cv@@@std@@@4@@Z
  void cv::GComputation::recompile(class std::vector<class cv::util::variant<struct cv::util::monostate,struct cv::GMatDesc,struct cv::GScalarDesc,struct cv::GArrayDesc,struct cv::GOpaqueDesc,struct cv::GFrameDesc>,class std::allocator<class cv::util::variant<struct cv::util::monostate,struct cv::GMatDesc,struct cv::GScalarDesc,struct cv::GArrayDesc,struct cv::GOpaqueDesc,struct cv::GFrameDesc> > > &&,class std::vector<struct cv::GCompileArg,class std::allocator<struct cv::GCompileArg> > &&)
}
// ?serialize@GComputation@cv@@QEBAXAEAUIOStream@s11n@gapi@2@@Z	?serialize@GComputation@cv@@QEBAXAEAUIOStream@s11n@gapi@2@@Z	void cv::GComputation::serialize(struct cv::gapi::s11n::IOStream &)
