// ??0_OutputArray@cv@@QEAA@AEAV?$vector@VGpuMat@cuda@cv@@V?$allocator@VGpuMat@cuda@cv@@@std@@@std@@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class std::vector<class cv::cuda::GpuMat,class std::allocator<class cv::cuda::GpuMat> > & __ptr64) __ptr64
{
  index 1370
  ??0_OutputArray@debug_build_guard@cv@@QEAA@AEAV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@@Z
  ??0_OutputArray@cv@@QEAA@AEAV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@@Z
  public: __cdecl cv::_OutputArray::_OutputArray(class std::vector<class cv::Mat,class std::allocator<class cv::Mat> > & __ptr64) __ptr64
}
procedure Constructor_OutputArray(const Obj: TOutputArray;const m: vector<TMat>); overload; external opencv_world_dll
{$IFDEF DEBUG}
  name '??0_OutputArray@debug_build_guard@cv@@QEAA@AEAV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@@Z'
{$ELSE}
  name '??0_OutputArray@cv@@QEAA@AEAV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@@Z'
{$ENDIF}
{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
// ??0_OutputArray@cv@@QEAA@AEAV?$vector@VUMat@cv@@V?$allocator@VUMat@cv@@@std@@@std@@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class std::vector<class cv::UMat,class std::allocator<class cv::UMat> > & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEAVBuffer@ogl@1@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class cv::ogl::Buffer & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEAVGpuMat@cuda@1@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class cv::cuda::GpuMat & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEAVHostMem@cuda@1@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class cv::cuda::HostMem & __ptr64) __ptr64
{
  ??0_OutputArray@debug_build_guard@cv@@QEAA@AEAVMat@2@@Z
  ??0_OutputArray@cv@@QEAA@AEAVMat@1@@Z
  public: __cdecl cv::_OutputArray::_OutputArray(class cv::Mat & __ptr64) __ptr64
}
procedure Constructor_OutputArray(const Obj: TOutputArray;const m: TMat); overload; external opencv_world_dll
{$IFDEF DEBUG}
  name '??0_OutputArray@debug_build_guard@cv@@QEAA@AEAVMat@2@@Z'
{$ELSE}
  name '??0_OutputArray@cv@@QEAA@AEAVMat@1@@Z'
{$ENDIF}
{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
// ??0_OutputArray@cv@@QEAA@AEAVUMat@1@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class cv::UMat & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEBV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class std::vector<class cv::Mat,class std::allocator<class cv::Mat> > const & __ptr64) __ptr64
// procedure Constructor_OutputArray(const Obj: pOutputArray; const m: pStdVectorMat); overload; external opencv_world_dll index 1377 {$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
// ??0_OutputArray@cv@@QEAA@AEBV?$vector@VUMat@cv@@V?$allocator@VUMat@cv@@@std@@@std@@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class std::vector<class cv::UMat,class std::allocator<class cv::UMat> > const & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEBVBuffer@ogl@1@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class cv::ogl::Buffer const & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEBVGpuMat@cuda@1@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class cv::cuda::GpuMat const & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEBVHostMem@cuda@1@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class cv::cuda::HostMem const & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEBVMat@1@@Z public: __cdecl cv::_OutputArray::_OutputArray(class cv::Mat const & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@AEBVUMat@1@@Z	public: __cdecl cv::_OutputArray::_OutputArray(class cv::UMat const & __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@HPEAX@Z	public: __cdecl cv::_OutputArray::_OutputArray(int,void * __ptr64) __ptr64
// ??0_OutputArray@cv@@QEAA@XZ public: __cdecl cv::_OutputArray::_OutputArray(void) __ptr64
procedure Constructor_OutputArray(const Obj: TOutputArray) { : TCVOutputArrayPointer }; overload; external opencv_world_dll
// index 1385
  name '??0_OutputArray@cv@@QEAA@XZ'
{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
// ??1_OutputArray@cv@@QEAA@XZ public: __cdecl cv::_OutputArray::~_OutputArray(void) __ptr64
procedure Destructor_OutputArray(const Obj: TOutputArray); overload; external opencv_world_dll
// index 1814
  name '??1_OutputArray@cv@@QEAA@XZ'
{$IFDEF DELAYED_LOAD_DLL} delayed{$ENDIF};
// ??4_OutputArray@cv@@QEAAAEAV01@$$QEAV01@@Z	public: class cv::_OutputArray & __ptr64 __cdecl cv::_OutputArray::operator=(class cv::_OutputArray && __ptr64) __ptr64
// ??4_OutputArray@cv@@QEAAAEAV01@AEBV01@@Z	public: class cv::_OutputArray & __ptr64 __cdecl cv::_OutputArray::operator=(class cv::_OutputArray const & __ptr64) __ptr64
// ?assign@_OutputArray@cv@@QEBAXAEBV?$vector@VMat@cv@@V?$allocator@VMat@cv@@@std@@@std@@@Z	public: void __cdecl cv::_OutputArray::assign(class std::vector<class cv::Mat,class std::allocator<class cv::Mat> > const & __ptr64)const __ptr64
// ?assign@_OutputArray@cv@@QEBAXAEBV?$vector@VUMat@cv@@V?$allocator@VUMat@cv@@@std@@@std@@@Z	public: void __cdecl cv::_OutputArray::assign(class std::vector<class cv::UMat,class std::allocator<class cv::UMat> > const & __ptr64)const __ptr64
// ?assign@_OutputArray@cv@@QEBAXAEBVMat@2@@Z	public: void __cdecl cv::_OutputArray::assign(class cv::Mat const & __ptr64)const __ptr64
// ?assign@_OutputArray@cv@@QEBAXAEBVUMat@2@@Z	public: void __cdecl cv::_OutputArray::assign(class cv::UMat const & __ptr64)const __ptr64
// ?clear@_OutputArray@cv@@QEBAXXZ	public: void __cdecl cv::_OutputArray::clear(void)const __ptr64
// ?create@_OutputArray@cv@@QEBAXHHHH_NW4DepthMask@12@@Z	public: void __cdecl cv::_OutputArray::create(int,int,int,int,bool,enum cv::_OutputArray::DepthMask)const __ptr64
// ?create@_OutputArray@cv@@QEBAXHPEBHHH_NW4DepthMask@12@@Z	public: void __cdecl cv::_OutputArray::create(int,int const * __ptr64,int,int,bool,enum cv::_OutputArray::DepthMask)const __ptr64
// ?create@_OutputArray@cv@@QEBAXV?$Size_@H@2@HH_NW4DepthMask@12@@Z	public: void __cdecl cv::_OutputArray::create(class cv::Size_<int>,int,int,bool,enum cv::_OutputArray::DepthMask)const __ptr64
// ?createSameSize@_OutputArray@cv@@QEBAXAEBV_InputArray@2@H@Z	public: void __cdecl cv::_OutputArray::createSameSize(class cv::_InputArray const & __ptr64,int)const __ptr64
// ?fixedSize@_OutputArray@cv@@QEBA_NXZ	public: bool __cdecl cv::_OutputArray::fixedSize(void)const __ptr64
// ?fixedType@_OutputArray@cv@@QEBA_NXZ	public: bool __cdecl cv::_OutputArray::fixedType(void)const __ptr64
// ?getGpuMatRef@_OutputArray@cv@@QEBAAEAVGpuMat@cuda@2@XZ	public: class cv::cuda::GpuMat & __ptr64 __cdecl cv::_OutputArray::getGpuMatRef(void)const __ptr64
// ?getGpuMatVecRef@_OutputArray@cv@@QEBAAEAV?$vector@VGpuMat@cuda@cv@@V?$allocator@VGpuMat@cuda@cv@@@std@@@std@@XZ	public: class std::vector<class cv::cuda::GpuMat,class std::allocator<class cv::cuda::GpuMat> > & __ptr64 __cdecl cv::_OutputArray::getGpuMatVecRef(void)const __ptr64
// ?getHostMemRef@_OutputArray@cv@@QEBAAEAVHostMem@cuda@2@XZ	public: class cv::cuda::HostMem & __ptr64 __cdecl cv::_OutputArray::getHostMemRef(void)const __ptr64
// ?getMatRef@_OutputArray@cv@@QEBAAEAVMat@2@H@Z	public: class cv::Mat & __ptr64 __cdecl cv::_OutputArray::getMatRef(int)const __ptr64
// ?getOGlBufferRef@_OutputArray@cv@@QEBAAEAVBuffer@ogl@2@XZ	public: class cv::ogl::Buffer & __ptr64 __cdecl cv::_OutputArray::getOGlBufferRef(void)const __ptr64
// ?getUMatRef@_OutputArray@cv@@QEBAAEAVUMat@2@H@Z	public: class cv::UMat & __ptr64 __cdecl cv::_OutputArray::getUMatRef(int)const __ptr64
// ?move@_OutputArray@cv@@QEBAXAEAVMat@2@@Z	public: void __cdecl cv::_OutputArray::move(class cv::Mat & __ptr64)const __ptr64
// ?move@_OutputArray@cv@@QEBAXAEAVUMat@2@@Z	public: void __cdecl cv::_OutputArray::move(class cv::UMat & __ptr64)const __ptr64
// ?needed@_OutputArray@cv@@QEBA_NXZ	public: bool __cdecl cv::_OutputArray::needed(void)const __ptr64
// ?release@_OutputArray@cv@@QEBAXXZ	public: void __cdecl cv::_OutputArray::release(void)const __ptr64
// ?setTo@_OutputArray@cv@@QEBAXAEBV_InputArray@2@0@Z	public: void __cdecl cv::_OutputArray::setTo(class cv::_InputArray const & __ptr64,class cv::_InputArray const & __ptr64)const __ptr64
