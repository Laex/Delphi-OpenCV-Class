??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > && __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@AEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > && __ptr64,class std::allocator<char> const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@AEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,class std::allocator<char> const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64,unsigned __int64,class std::allocator<char> const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_KAEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64,class std::allocator<char> const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::allocator<char> const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const * __ptr64 const) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBDAEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const * __ptr64 const,class std::allocator<char> const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const * __ptr64 const,unsigned __int64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_KAEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const * __ptr64 const,unsigned __int64,class std::allocator<char> const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@V?$initializer_list@D@1@AEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::initializer_list<char>,class std::allocator<char> const & __ptr64) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(void) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(unsigned __int64,char) __ptr64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KDAEBV?$allocator@D@1@@Z;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(unsigned __int64,char,class std::allocator<char> const & __ptr64) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@$$QEAV01@@Z;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > && __ptr64) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@$$QEAV01@AEBV?$allocator@V?$Rect_@H@cv@@@1@@Z;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > && __ptr64,class std::allocator<class cv::Rect_<int> > const & __ptr64) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@AEBV01@@Z;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > const & __ptr64) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@AEBV01@AEBV?$allocator@V?$Rect_@H@cv@@@1@@Z;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > const & __ptr64,class std::allocator<class cv::Rect_<int> > const & __ptr64) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@AEBV?$allocator@V?$Rect_@H@cv@@@1@@Z;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(class std::allocator<class cv::Rect_<int> > const & __ptr64) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@V?$initializer_list@V?$Rect_@H@cv@@@1@AEBV?$allocator@V?$Rect_@H@cv@@@1@@Z;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(class std::initializer_list<class cv::Rect_<int> >,class std::allocator<class cv::Rect_<int> > const & __ptr64) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@XZ;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(void) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@_KAEBV?$Rect_@H@cv@@AEBV?$allocator@V?$Rect_@H@cv@@@1@@Z;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(unsigned __int64,class cv::Rect_<int> const & __ptr64,class std::allocator<class cv::Rect_<int> > const & __ptr64) __ptr64
??0?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@_KAEBV?$allocator@V?$Rect_@H@cv@@@1@@Z;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(unsigned __int64,class std::allocator<class cv::Rect_<int> > const & __ptr64) __ptr64
??0ExportString@@QEAA@$$QEAV0@@Z;public: __cdecl ExportString::ExportString(class ExportString && __ptr64) __ptr64
??0ExportString@@QEAA@AEBV0@@Z;public: __cdecl ExportString::ExportString(class ExportString const & __ptr64) __ptr64
??0ExportString@@QEAA@XZ;public: __cdecl ExportString::ExportString(void) __ptr64
??0ExportVectorRect@@QEAA@$$QEAV0@@Z;public: __cdecl ExportVectorRect::ExportVectorRect(class ExportVectorRect && __ptr64) __ptr64
??0ExportVectorRect@@QEAA@AEBV0@@Z;public: __cdecl ExportVectorRect::ExportVectorRect(class ExportVectorRect const & __ptr64) __ptr64
??0ExportVectorRect@@QEAA@XZ;public: __cdecl ExportVectorRect::ExportVectorRect(void) __ptr64
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ;public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(void) __ptr64
??1?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA@XZ;public: __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::~vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >(void) __ptr64
??1ExportString@@QEAA@XZ;public: __cdecl ExportString::~ExportString(void) __ptr64
??1ExportVectorRect@@QEAA@XZ;public: __cdecl ExportVectorRect::~ExportVectorRect(void) __ptr64
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > && __ptr64) __ptr64
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=(char) __ptr64
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=(char const * __ptr64 const) __ptr64
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$initializer_list@D@1@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator=(class std::initializer_list<char>) __ptr64
??4?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAAEAV01@$$QEAV01@@Z;public: class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::operator=(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > && __ptr64) __ptr64
??4?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAAEAV01@AEBV01@@Z;public: class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::operator=(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > const & __ptr64) __ptr64
??4?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAAEAV01@V?$initializer_list@V?$Rect_@H@cv@@@1@@Z;public: class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::operator=(class std::initializer_list<class cv::Rect_<int> >) __ptr64
??4ExportString@@QEAAAEAV0@$$QEAV0@@Z;public: class ExportString & __ptr64 __cdecl ExportString::operator=(class ExportString && __ptr64) __ptr64
??4ExportString@@QEAAAEAV0@AEBV0@@Z;public: class ExportString & __ptr64 __cdecl ExportString::operator=(class ExportString const & __ptr64) __ptr64
??4ExportVectorRect@@QEAAAEAV0@$$QEAV0@@Z;public: class ExportVectorRect & __ptr64 __cdecl ExportVectorRect::operator=(class ExportVectorRect && __ptr64) __ptr64
??4ExportVectorRect@@QEAAAEAV0@AEBV0@@Z;public: class ExportVectorRect & __ptr64 __cdecl ExportVectorRect::operator=(class ExportVectorRect const & __ptr64) __ptr64
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z;public: char & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[](unsigned __int64) __ptr64
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z;public: char const & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[](unsigned __int64)const __ptr64
??A?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAAEAV?$Rect_@H@cv@@_K@Z;public: class cv::Rect_<int> & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::operator[](unsigned __int64) __ptr64
??A?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBAAEBV?$Rect_@H@cv@@_K@Z;public: class cv::Rect_<int> const & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::operator[](unsigned __int64)const __ptr64
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator+=(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator+=(char) __ptr64
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator+=(char const * __ptr64 const) __ptr64
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$initializer_list@D@1@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator+=(class std::initializer_list<char>) __ptr64
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Become_small(void) __ptr64
?_Buy_nonzero@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAX_K@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Buy_nonzero(unsigned __int64) __ptr64
?_Buy_raw@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAX_K@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Buy_raw(unsigned __int64) __ptr64
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z;private: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Calculate_growth(unsigned __int64)const __ptr64
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z;private: static unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Calculate_growth(unsigned __int64,unsigned __int64,unsigned __int64)
?_Calculate_growth@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEBA_K_K@Z;private: unsigned __int64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Calculate_growth(unsigned __int64)const __ptr64
?_Change_array@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXQEAV?$Rect_@H@cv@@_K1@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Change_array(class cv::Rect_<int> * __ptr64 const,unsigned __int64,unsigned __int64) __ptr64
?_Clear_and_reserve_geometric@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAX_K@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Clear_and_reserve_geometric(unsigned __int64) __ptr64
?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEAD0Urandom_access_iterator_tag@2@@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Construct(char * __ptr64 const,char * __ptr64 const,struct std::random_access_iterator_tag) __ptr64
?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXQEBD0Urandom_access_iterator_tag@2@@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Construct(char const * __ptr64 const,char const * __ptr64 const,struct std::random_access_iterator_tag) __ptr64
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Construct_lv_contents(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@U?$integral_constant@_N$00@2@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy_assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,struct std::integral_constant<bool,1>) __ptr64
?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@U?$integral_constant@_N$0A@@2@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy_assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,struct std::integral_constant<bool,0>) __ptr64
?_Copy_assign@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXAEBV12@U?$integral_constant@_N$00@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Copy_assign(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > const & __ptr64,struct std::integral_constant<bool,1>) __ptr64
?_Copy_assign@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXAEBV12@U?$integral_constant@_N$0A@@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Copy_assign(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > const & __ptr64,struct std::integral_constant<bool,0>) __ptr64
?_Copy_assign_val_from_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy_assign_val_from_small(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
?_Copy_s@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEAD_K_K1@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy_s(char * __ptr64 const,unsigned __int64,unsigned __int64,unsigned __int64)const __ptr64
?_Destroy@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXPEAV?$Rect_@H@cv@@0@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Destroy(class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64) __ptr64
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Eos(unsigned __int64) __ptr64
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NAEBV12@@Z;public: bool __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Equal(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64)const __ptr64
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z;public: bool __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Equal(char const * __ptr64 const)const __ptr64
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ;private: class std::allocator<char> & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Getal(void) __ptr64
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ;private: class std::allocator<char> const & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Getal(void)const __ptr64
?_Getal@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAAEAV?$allocator@V?$Rect_@H@cv@@@2@XZ;private: class std::allocator<class cv::Rect_<int> > & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Getal(void) __ptr64
?_Getal@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEBAAEBV?$allocator@V?$Rect_@H@cv@@@2@XZ;private: class std::allocator<class cv::Rect_<int> > const & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Getal(void)const __ptr64
?_Make_iterator@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@QEAV?$Rect_@H@cv@@@Z;private: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Make_iterator(class cv::Rect_<int> * __ptr64 const) __ptr64
?_Make_iterator_offset@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@_K@Z;private: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Make_iterator_offset(unsigned __int64) __ptr64
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Memcpy_val_from(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Move_assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64,struct std::integral_constant<bool,1>) __ptr64
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$0A@@2@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Move_assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64,struct std::integral_constant<bool,0>) __ptr64
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Move_assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64,struct std::_Equal_allocators) __ptr64
?_Move_assign@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Move_assign(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64,struct std::integral_constant<bool,1>) __ptr64
?_Move_assign@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXAEAV12@U?$integral_constant@_N$0A@@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Move_assign(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64,struct std::integral_constant<bool,0>) __ptr64
?_Move_assign@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Move_assign(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64,struct std::_Equal_allocators) __ptr64
?_Move_construct@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Move_construct(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64,struct std::integral_constant<bool,1>) __ptr64
?_Move_construct@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXAEAV12@U?$integral_constant@_N$0A@@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Move_construct(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64,struct std::integral_constant<bool,0>) __ptr64
?_Orphan_all@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Orphan_all(void) __ptr64
?_Orphan_range@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEBAXPEAV?$Rect_@H@cv@@0@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Orphan_range(class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64)const __ptr64
?_Reallocate_exactly@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAX_K@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Reallocate_exactly(unsigned __int64) __ptr64
?_Swap_bx_large_with_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEAV?$_String_val@U?$_Simple_types@D@std@@@2@0@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Swap_bx_large_with_small(class std::_String_val<struct std::_Simple_types<char> > & __ptr64,class std::_String_val<struct std::_Simple_types<char> > & __ptr64) __ptr64
?_Swap_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEAV12@U?$integral_constant@_N$00@2@@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Swap_data(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64,struct std::integral_constant<bool,1>) __ptr64
?_Swap_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEAV12@U?$integral_constant@_N$0A@@2@@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Swap_data(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64,struct std::integral_constant<bool,0>) __ptr64
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Swap_proxy_and_iterators(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64) __ptr64
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$00@2@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Take_contents(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64,struct std::integral_constant<bool,1>) __ptr64
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U?$integral_constant@_N$0A@@2@@Z;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Take_contents(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64,struct std::integral_constant<bool,0>) __ptr64
?_Tidy@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXXZ;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Tidy(void) __ptr64
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy_deallocate(void) __ptr64
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ;private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy_init(void) __ptr64
?_Ufill@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAPEAV?$Rect_@H@cv@@PEAV34@_KAEBV34@@Z;private: class cv::Rect_<int> * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Ufill(class cv::Rect_<int> * __ptr64,unsigned __int64,class cv::Rect_<int> const & __ptr64) __ptr64
?_Ufill@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAPEAV?$Rect_@H@cv@@PEAV34@_KU_Value_init_tag@2@@Z;private: class cv::Rect_<int> * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Ufill(class cv::Rect_<int> * __ptr64,unsigned __int64,struct std::_Value_init_tag) __ptr64
?_Umove@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAPEAV?$Rect_@H@cv@@PEAV34@00@Z;private: class cv::Rect_<int> * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Umove(class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64) __ptr64
?_Umove_if_noexcept1@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXPEAV?$Rect_@H@cv@@00U?$integral_constant@_N$00@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Umove_if_noexcept1(class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64,struct std::integral_constant<bool,1>) __ptr64
?_Umove_if_noexcept1@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXPEAV?$Rect_@H@cv@@00U?$integral_constant@_N$0A@@2@@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Umove_if_noexcept1(class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64,struct std::integral_constant<bool,0>) __ptr64
?_Umove_if_noexcept@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@AEAAXPEAV?$Rect_@H@cv@@00@Z;private: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Umove_if_noexcept(class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64,class cv::Rect_<int> * __ptr64) __ptr64
?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ;public: char * __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Unchecked_begin(void) __ptr64
?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ;public: char const * __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Unchecked_begin(void)const __ptr64
?_Unchecked_begin@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAPEAV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Unchecked_begin(void) __ptr64
?_Unchecked_begin@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBAPEBV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> const * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Unchecked_begin(void)const __ptr64
?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ;public: char * __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Unchecked_end(void) __ptr64
?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ;public: char const * __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Unchecked_end(void)const __ptr64
?_Unchecked_end@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAPEAV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Unchecked_end(void) __ptr64
?_Unchecked_end@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBAPEBV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> const * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Unchecked_end(void)const __ptr64
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ;private: static void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Xlen(void)
?_Xlength@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@CAXXZ;private: static void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Xlength(void)
?_Xrange@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@CAXXZ;private: static void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::_Xrange(void)
?__autoclassinit2@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAX_K@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::__autoclassinit2(unsigned __int64) __ptr64
?__autoclassinit2@ExportVectorRect@@QEAAX_K@Z;public: void __cdecl ExportVectorRect::__autoclassinit2(unsigned __int64) __ptr64
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64,unsigned __int64) __ptr64
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append(char const * __ptr64 const) __ptr64
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append(char const * __ptr64 const,unsigned __int64) __ptr64
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$initializer_list@D@2@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append(class std::initializer_list<char>) __ptr64
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append(unsigned __int64,char) __ptr64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > && __ptr64) __ptr64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64,unsigned __int64) __ptr64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(char const * __ptr64 const) __ptr64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(char const * __ptr64 const,unsigned __int64) __ptr64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$initializer_list@D@2@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(class std::initializer_list<char>) __ptr64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(unsigned __int64,char) __ptr64
?assign@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAXV?$initializer_list@V?$Rect_@H@cv@@@2@@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::assign(class std::initializer_list<class cv::Rect_<int> >) __ptr64
?assign@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAX_KAEBV?$Rect_@H@cv@@@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::assign(unsigned __int64,class cv::Rect_<int> const & __ptr64) __ptr64
?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z;public: char & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::at(unsigned __int64) __ptr64
?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z;public: char const & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::at(unsigned __int64)const __ptr64
?at@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAAEAV?$Rect_@H@cv@@_K@Z;public: class cv::Rect_<int> & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::at(unsigned __int64) __ptr64
?at@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBAAEBV?$Rect_@H@cv@@_K@Z;public: class cv::Rect_<int> const & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::at(unsigned __int64)const __ptr64
?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ;public: char & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::back(void) __ptr64
?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBDXZ;public: char const & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::back(void)const __ptr64
?back@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAAEAV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::back(void) __ptr64
?back@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBAAEBV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> const & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::back(void)const __ptr64
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ;public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::begin(void) __ptr64
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ;public: class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::begin(void)const __ptr64
?begin@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@XZ;public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::begin(void) __ptr64
?begin@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@XZ;public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::begin(void)const __ptr64
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ;public: char const * __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str(void)const __ptr64
?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::capacity(void)const __ptr64
?capacity@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA_KXZ;public: unsigned __int64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::capacity(void)const __ptr64
?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ;public: class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::cbegin(void)const __ptr64
?cbegin@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@XZ;public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::cbegin(void)const __ptr64
?cend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ;public: class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::cend(void)const __ptr64
?cend@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@XZ;public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::cend(void)const __ptr64
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::clear(void) __ptr64
?clear@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAXXZ;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::clear(void) __ptr64
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z;public: int __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::compare(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64)const __ptr64
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHQEBD@Z;public: int __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::compare(char const * __ptr64 const)const __ptr64
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAH_K0AEBV12@00@Z;public: int __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::compare(unsigned __int64,unsigned __int64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64,unsigned __int64)const __ptr64
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAH_K0AEBV12@@Z;public: int __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::compare(unsigned __int64,unsigned __int64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64)const __ptr64
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAH_K0QEBD0@Z;public: int __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::compare(unsigned __int64,unsigned __int64,char const * __ptr64 const,unsigned __int64)const __ptr64
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAH_K0QEBD@Z;public: int __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::compare(unsigned __int64,unsigned __int64,char const * __ptr64 const)const __ptr64
?copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEAD_K_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::copy(char * __ptr64 const,unsigned __int64,unsigned __int64)const __ptr64
?crbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$reverse_iterator@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::crbegin(void)const __ptr64
?crbegin@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::crbegin(void)const __ptr64
?crend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$reverse_iterator@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::crend(void)const __ptr64
?crend@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::crend(void)const __ptr64
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ;public: char const * __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::data(void)const __ptr64
?data@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAPEAV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::data(void) __ptr64
?data@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBAPEBV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> const * __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::data(void)const __ptr64
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ;public: bool __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::empty(void)const __ptr64
?empty@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA_NXZ;public: bool __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::empty(void)const __ptr64
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ;public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::end(void) __ptr64
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ;public: class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::end(void)const __ptr64
?end@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@XZ;public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::end(void) __ptr64
?end@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@XZ;public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::end(void)const __ptr64
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z;public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >) __ptr64
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z;public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >) __ptr64
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase(unsigned __int64) __ptr64
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase(unsigned __int64,unsigned __int64) __ptr64
?erase@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@0@Z;public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::erase(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > >,class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > >) __ptr64
?erase@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@@Z;public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::erase(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > >) __ptr64
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64)const __ptr64
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find(char,unsigned __int64)const __ptr64
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K1@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find(char const * __ptr64 const,unsigned __int64,unsigned __int64)const __ptr64
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find(char const * __ptr64 const,unsigned __int64)const __ptr64
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_first_not_of(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64)const __ptr64
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_first_not_of(char,unsigned __int64)const __ptr64
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K1@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_first_not_of(char const * __ptr64 const,unsigned __int64,unsigned __int64)const __ptr64
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_first_not_of(char const * __ptr64 const,unsigned __int64)const __ptr64
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_first_of(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64)const __ptr64
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_first_of(char,unsigned __int64)const __ptr64
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K1@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_first_of(char const * __ptr64 const,unsigned __int64,unsigned __int64)const __ptr64
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_first_of(char const * __ptr64 const,unsigned __int64)const __ptr64
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_last_not_of(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64)const __ptr64
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_last_not_of(char,unsigned __int64)const __ptr64
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K1@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_last_not_of(char const * __ptr64 const,unsigned __int64,unsigned __int64)const __ptr64
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_last_not_of(char const * __ptr64 const,unsigned __int64)const __ptr64
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_last_of(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64)const __ptr64
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_last_of(char,unsigned __int64)const __ptr64
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K1@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_last_of(char const * __ptr64 const,unsigned __int64,unsigned __int64)const __ptr64
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find_last_of(char const * __ptr64 const,unsigned __int64)const __ptr64
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ;public: char & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::front(void) __ptr64
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBDXZ;public: char const & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::front(void)const __ptr64
?front@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAAEAV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::front(void) __ptr64
?front@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBAAEBV?$Rect_@H@cv@@XZ;public: class cv::Rect_<int> const & __ptr64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::front(void)const __ptr64
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ;public: class std::allocator<char> __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::get_allocator(void)const __ptr64
?get_allocator@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$allocator@V?$Rect_@H@cv@@@2@XZ;public: class std::allocator<class cv::Rect_<int> > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::get_allocator(void)const __ptr64
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z;public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,char) __ptr64
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$initializer_list@D@2@@Z;public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::initializer_list<char>) __ptr64
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@_KD@Z;public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,unsigned __int64,char) __ptr64
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert(unsigned __int64,unsigned __int64,char) __ptr64
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@0_K@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert(unsigned __int64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64,unsigned __int64) __ptr64
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert(unsigned __int64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert(unsigned __int64,char const * __ptr64 const,unsigned __int64) __ptr64
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::insert(unsigned __int64,char const * __ptr64 const) __ptr64
?insert@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@$$QEAV?$Rect_@H@cv@@@Z;public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::insert(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > >,class cv::Rect_<int> && __ptr64) __ptr64
?insert@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@AEBV?$Rect_@H@cv@@@Z;public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::insert(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > >,class cv::Rect_<int> const & __ptr64) __ptr64
?insert@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@V?$initializer_list@V?$Rect_@H@cv@@@2@@Z;public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::insert(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > >,class std::initializer_list<class cv::Rect_<int> >) __ptr64
?insert@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@2@_KAEBV?$Rect_@H@cv@@@Z;public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::insert(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > >,unsigned __int64,class cv::Rect_<int> const & __ptr64) __ptr64
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::length(void)const __ptr64
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::max_size(void)const __ptr64
?max_size@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA_KXZ;public: unsigned __int64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::max_size(void)const __ptr64
?pop_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::pop_back(void) __ptr64
?pop_back@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAXXZ;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::pop_back(void) __ptr64
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char) __ptr64
?push_back@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAX$$QEAV?$Rect_@H@cv@@@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::push_back(class cv::Rect_<int> && __ptr64) __ptr64
?push_back@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAXAEBV?$Rect_@H@cv@@@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::push_back(class cv::Rect_<int> const & __ptr64) __ptr64
?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$reverse_iterator@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::rbegin(void) __ptr64
?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$reverse_iterator@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::rbegin(void)const __ptr64
?rbegin@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::rbegin(void) __ptr64
?rbegin@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::rbegin(void)const __ptr64
?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$reverse_iterator@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char> > > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::rend(void) __ptr64
?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$reverse_iterator@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > > > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::rend(void)const __ptr64
?rend@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAA?AV?$reverse_iterator@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::rend(void) __ptr64
?rend@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$Rect_@H@cv@@@std@@@std@@@std@@@2@XZ;public: class std::reverse_iterator<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class cv::Rect_<int> > > > > __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::rend(void)const __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0AEBV12@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0QEBD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,char const * __ptr64 const) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0QEBD_K@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,char const * __ptr64 const,unsigned __int64) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$initializer_list@D@2@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::initializer_list<char>) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0_KD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char> > >,unsigned __int64,char) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(unsigned __int64,unsigned __int64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0QEBD@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(unsigned __int64,unsigned __int64,char const * __ptr64 const) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K0D@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(unsigned __int64,unsigned __int64,unsigned __int64,char) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_KAEBV12@01@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(unsigned __int64,unsigned __int64,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64,unsigned __int64) __ptr64
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_KQEBD0@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::replace(unsigned __int64,unsigned __int64,char const * __ptr64 const,unsigned __int64) __ptr64
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::reserve(unsigned __int64) __ptr64
?reserve@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAX_K@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::reserve(unsigned __int64) __ptr64
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::resize(unsigned __int64,char) __ptr64
?resize@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAX_K@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::resize(unsigned __int64) __ptr64
?resize@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAX_KAEBV?$Rect_@H@cv@@@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::resize(unsigned __int64,class cv::Rect_<int> const & __ptr64) __ptr64
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::rfind(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __ptr64,unsigned __int64)const __ptr64
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::rfind(char,unsigned __int64)const __ptr64
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K1@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::rfind(char const * __ptr64 const,unsigned __int64,unsigned __int64)const __ptr64
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::rfind(char const * __ptr64 const,unsigned __int64)const __ptr64
?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::shrink_to_fit(void) __ptr64
?shrink_to_fit@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAXXZ;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::shrink_to_fit(void) __ptr64
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ;public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size(void)const __ptr64
?size@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEBA_KXZ;public: unsigned __int64 __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::size(void)const __ptr64
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z;public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::substr(unsigned __int64,unsigned __int64)const __ptr64
?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEAV12@@Z;public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::swap(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __ptr64) __ptr64
?swap@?$vector@V?$Rect_@H@cv@@V?$allocator@V?$Rect_@H@cv@@@std@@@std@@QEAAXAEAV12@@Z;public: void __cdecl std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > >::swap(class std::vector<class cv::Rect_<int>,class std::allocator<class cv::Rect_<int> > > & __ptr64) __ptr64
